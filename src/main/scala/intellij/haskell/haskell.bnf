// Originally derived from http://www.haskell.org/onlinereport/haskell2010/haskellch10.html
{
  parserClass="intellij.haskell.parser.HaskellParser"
  parserUtilClass="intellij.haskell.psi.HaskellParserUtil"

  implements="intellij.haskell.psi.HaskellCompositeElement"
  extends="intellij.haskell.psi.impl.HaskellCompositeElementImpl"

  psiClassPrefix="Haskell"
  psiImplClassSuffix="Impl"
  psiPackage="intellij.haskell.psi"
  psiImplPackage="intellij.haskell.psi.impl"

  elementTypeHolderClass="intellij.haskell.psi.HaskellTypes"
  elementTypeClass="intellij.haskell.psi.HaskellCompositeElementType"
  tokenTypeClass="intellij.haskell.psi.HaskellTokenType"

  psiImplUtilClass="intellij.haskell.psi.impl.HaskellPsiImplUtil"

  elementTypePrefix="HS_"

  methods("varid|varsym|conid|consym|modid")=[getName setName getNameIdentifier getReference getPresentation]
  extends("varid|varsym|conid|consym|modid")="intellij.haskell.psi.impl.HaskellNamedStubBasedPsiElementBase<?>"
  implements("varid|varsym|conid|consym|modid")="intellij.haskell.psi.HaskellNamedElement"
  elementTypeFactory("varid|varsym|conid|consym|modid")="intellij.haskell.psi.impl.HaskellElementTypeFactory.factory"

  methods("type_signature|type_declaration|class_declaration|instance_declaration|type_family_declaration|deriving_declaration|type_instance_declaration")=[getName getPresentation getIdentifierElements getModuleName]
  methods("default_declaration|foreign_declaration|module_declaration")=[getName getPresentation getIdentifierElements getModuleName]
  implements("type_signature|type_declaration|class_declaration|instance_declaration|type_family_declaration|deriving_declaration|type_instance_declaration|default_declaration")="intellij.haskell.psi.HaskellDeclarationElement"
  implements("default_declaration|foreign_declaration|module_declaration")="intellij.haskell.psi.HaskellDeclarationElement"

  methods("data_declaration|newtype_declaration")=[getName getPresentation getIdentifierElements getModuleName getDataTypeConstructor]
  implements("data_declaration|newtype_declaration")="intellij.haskell.psi.HaskellDataConstructorDeclarationElement"

  methods("var_con|q_var_con")=[getName getIdentifierElement]

  methods("q_name|cname")=[getName getIdentifierElement getQualifierName]
  implements("q_name|cname")="intellij.haskell.psi.HaskellQualifiedNameElement"

  implements("line_expression|last_line_expression")="intellij.haskell.psi.HaskellLineExpressionElement"
  mixin("|line_expression|last_line_expression")="intellij.haskell.psi.impl.HaskellLineExpressionElementImpl"

  methods("var|con|varop|conop")=[getName]
  implements("var|con|varop|conop")="intellij.haskell.psi.HaskellCNameElement"
  mixin("var|con|varop|conop")="intellij.haskell.psi.impl.HaskellCNameElementImpl"

  methods("q_con_qualifier1|q_con_qualifier2|q_con_qualifier3|q_con_qualifier4|qualifier")=[getName setName getNameIdentifier getReference getPresentation]
  implements("q_con_qualifier1|q_con_qualifier2|q_con_qualifier3|q_con_qualifier4|qualifier")="intellij.haskell.psi.HaskellQualifierElement"
  mixin("q_con_qualifier1|q_con_qualifier2|q_con_qualifier3|q_con_qualifier4|qualifier")="intellij.haskell.psi.impl.HaskellQualifierElementImpl"
}

program                     ::= onl SHEBANG_LINE? onl file_header? onl module_body

file_header                 ::= (file_header_pragma onl)+
private pragma              ::= PRAGMA_START (onl CON_ID? onl general_pragma_content? onl PRAGMA_END)+ {pin=1}
file_header_pragma          ::= pragma

other_pragma                ::= pragma

general_pragma_content      ::= (CON_ID | VAR_ID | CONSYM_ID | VARSYM_ID |
                                  LEFT_PAREN | RIGHT_PAREN | FLOAT | UNDERSCORE |
                                  SEMICOLON | LEFT_BRACKET | RIGHT_BRACKET | literal | LEFT_BRACE | RIGHT_BRACE |
                                  COMMA | QUOTE | BACKQUOTE | NEWLINE | DOUBLE_QUOTE | TILDE | DOT | DOT_DOT | VERTICAL_BAR |
                                  EQUAL | DOUBLE_RIGHT_ARROW | COLON_COLON | RIGHT_ARROW | LEFT_ARROW | BACKSLASH | TYPE |
                                  INSTANCE | MODULE | WHERE | DO | LET | IN | CASE | OF | IF | THEN | ELSE | DIRECTIVE)+


module_body                 ::= module_declaration onl body | onl body
module_declaration          ::= MODULE modid onl pragma? onl (exports onl)? WHERE

private body                ::= import_declarations top_declarations  (NEWLINE | DIRECTIVE)*
cfiles_pragma               ::= pragma
import_declarations         ::= ((import_declaration | cfiles_pragma | DIRECTIVE) onl)*
private top_declarations    ::= (top_declaration (NEWLINE | DIRECTIVE)+)* top_declaration?

source_pragma               ::= pragma
import_declaration          ::= IMPORT (onls source_pragma)? (onls import_qualified)? (onls import_package_name)? onls modid onls import_qualified_as? onls import_spec? NEWLINE?   {methods=[getModuleName] pin=1}
import_qualified            ::= "qualified"
import_qualified_as         ::= "as" qualifier
import_spec                 ::= import_ids_spec |
                                  import_hiding_spec |
                                  import_empty_spec

import_ids_spec             ::= LEFT_PAREN onls import_id (onls COMMA? onls import_id)* onls (COMMA)? onls RIGHT_PAREN
import_hiding_spec          ::= import_hiding onls LEFT_PAREN onls (import_id onls (onls COMMA onls import_id)* onls (COMMA)?)? onls RIGHT_PAREN
import_empty_spec           ::= LEFT_PAREN RIGHT_PAREN
import_hiding               ::= "hiding"
import_id                   ::= TYPE? (cname LEFT_PAREN onls (cname_dot_dot onls (COMMA onls cname_dot_dot onls)* onls)? RIGHT_PAREN | cname)
import_package_name         ::= STRING_LITERAL

top_declaration             ::= type_declaration | data_declaration | newtype_declaration | class_declaration | instance_declaration | default_declaration |
                                  foreign_declaration | type_family_declaration | deriving_declaration | type_instance_declaration | type_signature |
                                  other_pragma | expression | fixity_declaration | DIRECTIVE

type_declaration            ::= TYPE onls simpletype onls COLON_COLON onls ttype |
                                  TYPE onls simpletype onls (EQUAL | WHERE) onls (ttype | type_signature) (DOUBLE_RIGHT_ARROW ttype)? |
                                  TYPE onls simpletype onls EQUAL onls expression |
                                  TYPE onls simpletype onls (LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* onls (EQUAL onls ttype | COLON_COLON ttype) |
                                  TYPE onls simpletype


ctype_pragma                ::= pragma
data_declaration            ::= DATA (onls ctype_pragma)? onls INSTANCE? onls (ccontext onls DOUBLE_RIGHT_ARROW)? onls simpletype onls (LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* onls (COLON_COLON ttype)? onls q_name* onls (EQUAL | WHERE)?
                                    onls (type_signature (nls type_signature)* | constrs) (onls data_declaration_deriving)? |
                                  DATA (onls ctype_pragma)? onls (LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* onls simpletype onls (LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* onls (COLON_COLON ttype)? onls q_name* (onls data_declaration_deriving)?

kind_signature              ::= q_name COLON_COLON ttype

data_declaration_deriving   ::= (DERIVING onl ttype | DERIVING onl LEFT_PAREN ttype (onl COMMA onl ttype)* onl RIGHT_PAREN)+

newtype_declaration         ::= NEWTYPE onls INSTANCE? onls ctype_pragma? onls (ccontext onls DOUBLE_RIGHT_ARROW)? onls simpletype onls EQUAL onls newconstr (onls DERIVING onls ttype)?

class_declaration           ::= CLASS onls (scontext onls DOUBLE_RIGHT_ARROW)? onls (q_name+ | ttype) onls (q_name | LEFT_PAREN ttype (onls COMMA onls ttype)* RIGHT_PAREN)*
                                    (onls VERTICAL_BAR onls ttype (onls COMMA onls ttype)*)? onls WHERE? onls cdecls? |
                                  CLASS onls scontext onls DOUBLE_RIGHT_ARROW onls (q_name+ | ttype) onls WHERE? onls cdecls?  // seen in Control.Lens.Internal.Indexed

overlap_pragma              ::= pragma
incoherent_pragma           ::= pragma
instance_declaration        ::= INSTANCE onls (overlap_pragma | "OVERLAPPABLE_" | "OVERLAPPING_" | incoherent_pragma)? onls (var_con+ DOT)? onls (scontext onls DOUBLE_RIGHT_ARROW)? onls
                                    (type_equality | q_name onls inst (onls WHERE (onls cidecls)?)?)    // this way of using type equality in Data.Type.Equality

type_equality               ::= q_name+ TILDE q_name+

default_declaration         ::= DEFAULT onls (type_signature | LEFT_PAREN (ttype (COMMA ttype)*)? RIGHT_PAREN)

type_instance_declaration   ::= TYPE_INSTANCE onls expression

type_signature              ::= q_names onls COLON_COLON (onls ccontext onls DOUBLE_RIGHT_ARROW)* onls ttype !EQUAL |
                                  q_names onls LEFT_PAREN onls q_names onls COMMA onls ccontext onls DOUBLE_RIGHT_ARROW onls ttype onls RIGHT_PAREN   // seen in  Test.Hspec.Expectations: with_loc(shouldBe, (Show a, Eq a) => a -> a -> Expectation)

fixity_declaration          ::= fixity (DECIMAL)? q_names

foreign_declaration         ::= (FOREIGN_IMPORT | FOREIGN_EXPORT) onls expression

type_family_declaration     ::= TYPE_FAMILY onls type_family_type (onls (WHERE | EQUAL) (onls expression)?)?

deriving_declaration        ::= DERIVING INSTANCE (scontext onls DOUBLE_RIGHT_ARROW)? onls q_name onls inst


private literal             ::= DECIMAL | HEXADECIMAL | OCTAL | FLOAT | CHARACTER_LITERAL | STRING_LITERAL

private keyword             ::= DATA | CLASS | INSTANCE | NEWTYPE | DERIVING | DEFAULT | TYPE_FAMILY | TYPE | TYPE_INSTANCE | IMPORT | MODULE

private onl                 ::= (DIRECTIVE? NEWLINE)*
private onls                ::= (&<<containsSpaces>> NEWLINE | DIRECTIVE NEWLINE !keyword)*       // optional multiple (new line and spaces)
private nls                 ::= (&<<containsSpaces>> NEWLINE)+                          // multiple new lines and spaces
private oonls               ::= (&<<containsSpaces>> NEWLINE)?                         // optional one (new line and spaces)

comments                    ::= COMMENT | NCOMMENT | HADDOCK | NHADDOCK | NOT_TERMINATED_COMMENT  // rule is necessary to refer to various comment types in code

modid                       ::= (conid DOT)* conid {pin=1 recoverWhile=modid_recover_rule stubClass = "intellij.haskell.psi.stubs.HaskellModidStub"}
private modid_recover_rule  ::= DOT

varid                       ::= VAR_ID "#"? {stubClass = "intellij.haskell.psi.stubs.HaskellVaridStub"}
conid                       ::= CON_ID "#"? {stubClass = "intellij.haskell.psi.stubs.HaskellConidStub"}
varsym                      ::= VARSYM_ID | DOT VARSYM_ID | DOT     {stubClass = "intellij.haskell.psi.stubs.HaskellVarsymStub"}
consym                      ::= CONSYM_ID   {stubClass = "intellij.haskell.psi.stubs.HaskellConsymStub"}

cname                       ::= var | con | conop | varop
var                         ::= varid | LEFT_PAREN varsym RIGHT_PAREN
con                         ::= conid | LEFT_PAREN consym RIGHT_PAREN
varop                       ::= varsym | BACKQUOTE varid BACKQUOTE
conop                       ::= consym | BACKQUOTE conid BACKQUOTE

var_con                     ::= varid | consym | varsym | conid
q_var_con                   ::= &<<noSpaceAfterQualifier>> qualifier DOT (varid | consym | DOT? varsym) | q_con

qualifier                   ::= conid (DOT conid)*

q_con                       ::= q_con_qualifier4 DOT conid | q_con_qualifier3 DOT conid | q_con_qualifier2 DOT conid | q_con_qualifier1 DOT conid
q_con_qualifier4            ::= conid DOT conid DOT conid DOT conid
q_con_qualifier3            ::= conid DOT conid DOT conid
q_con_qualifier2            ::= conid DOT conid
q_con_qualifier1            ::= conid
q_con_qualifier             ::= q_con_qualifier4 | q_con_qualifier3 | q_con_qualifier2 | q_con_qualifier1  // used for renaming

q_name                      ::= q_var_con | var_con | LEFT_PAREN q_var_con RIGHT_PAREN | LEFT_PAREN var_con RIGHT_PAREN | BACKQUOTE q_var_con BACKQUOTE | BACKQUOTE var_con BACKQUOTE
q_names                     ::= q_name (COMMA q_name)*

gtycon                      ::= QUOTE? q_name | LEFT_PAREN RIGHT_ARROW RIGHT_PAREN | LEFT_PAREN RIGHT_PAREN | QUOTE? LEFT_BRACKET RIGHT_BRACKET | LEFT_PAREN COMMA (COMMA)* RIGHT_PAREN

unpack_nounpack_pragma      ::= pragma
private constrs             ::= constr (onls VERTICAL_BAR onls constr)*
private constr              ::= (type_signature | constr1 | constr2 | constr3)
constr1                     ::= unpack_nounpack_pragma? (onls q_name)? (onls unpack_nounpack_pragma)? onls LEFT_BRACE onl fielddecl? ((onl COMMA)? onl fielddecl)* onl RIGHT_BRACE
constr2                     ::= unpack_nounpack_pragma? onls (ttype | q_name | LEFT_PAREN q_name* RIGHT_PAREN | LEFT_BRACKET q_name* RIGHT_BRACKET) unpack_nounpack_pragma? onls ((onls unpack_nounpack_pragma)? onls ttype (onls unpack_nounpack_pragma)?)*  // Base.hs: data () = () and GHC.Types.hs: data [] a = [] | a : [a]
constr3                     ::= (onls unpack_nounpack_pragma? onls ttype)+

fielddecl                   ::= q_names (onl COLON_COLON unpack_nounpack_pragma? (onls ("forall" | FORALL) (onls q_name)+)? (onls scontext onls DOUBLE_RIGHT_ARROW)? unpack_nounpack_pragma? onls ttype)?

private atype               ::= (("forall" | FORALL) (onl q_name | LEFT_PAREN (type_signature | ttype) RIGHT_PAREN)+ (onl DOUBLE_RIGHT_ARROW onl ttype)? |
                                  q_name? LEFT_PAREN ttype1 RIGHT_PAREN |
                                  q_name? LEFT_BRACE ttype1 RIGHT_BRACE |
                                  q_name? LEFT_PAREN ttype2 RIGHT_PAREN |
                                  q_name? LEFT_BRACE ttype2 RIGHT_BRACE |
                                  QUOTE? LEFT_BRACKET oonls ttype (oonls COMMA oonls ttype)* oonls RIGHT_BRACKET |
                                  QUOTE? (q_name (oonls COLON_COLON oonls ttype)?)+ | QUOTE? LEFT_PAREN RIGHT_PAREN | QUOTE? LEFT_BRACKET RIGHT_BRACKET | LEFT_PAREN COMMA+ RIGHT_PAREN  | literal | LEFT_PAREN RIGHT_ARROW RIGHT_PAREN | NEWLINE DIRECTIVE) !COLON_COLON

ttype1                      ::= (onl "#")? onl ttype ((onl COMMA)? onl ttype)* onl ("#" onl)?
ttype2                      ::= ("forall" | FORALL)? onl ttype (onl DOUBLE_RIGHT_ARROW onl ttype)? onl


ttype                       ::= "!"? (btype (oonls RIGHT_ARROW oonls ttype)* | list_type q_name* | LEFT_PAREN RIGHT_ARROW RIGHT_PAREN)

private btype               ::= (atype | TILDE)+     // generalization because left recursive is not supported

simpletype                  ::= ttype | (q_name | LEFT_PAREN RIGHT_PAREN)+ |
                                  q_name* oonls LEFT_PAREN q_name RIGHT_PAREN oonls q_name* |
                                  q_name oonls q_name* oonls (LEFT_PAREN type_signature RIGHT_PAREN)+ oonls q_name* |
                                  q_name | LEFT_PAREN RIGHT_PAREN | LEFT_BRACKET RIGHT_BRACKET q_name*    {methods=[getIdentifierElements]}

list_type                   ::= LEFT_BRACKET (COLON_COLON | q_name) RIGHT_BRACKET

type_family_type            ::= (q_name | LEFT_PAREN? q_names COLON_COLON? onls (ccontext DOUBLE_RIGHT_ARROW)? onls ttype? RIGHT_PAREN?)+ (COLON_COLON onls ttype)?

ccontext                     ::= LEFT_PAREN onls clazz (onls COMMA onls clazz)* onls RIGHT_PAREN |
                                  clazz

clazz                       ::=  q_name COLON_COLON q_name | ttype |
                                  q_name+ |
                                  q_name LEFT_PAREN q_name atype+ RIGHT_PAREN |
                                  q_name LEFT_PAREN q_name+ RIGHT_PAREN q_name*

scontext                    ::= simpleclass | simpleclass onls LEFT_PAREN onls simpleclass (onls COMMA onls simpleclass)* onls RIGHT_PAREN

simpleclass                 ::= ttype | q_name+ LEFT_PAREN q_name+ RIGHT_PAREN q_name* | q_name+

inst                        ::= gtycon+ instvar* (LEFT_PAREN onls gtycon (instvar)* onls RIGHT_PAREN)* instvar* |
                                  (LEFT_PAREN onls instvar (onls COMMA onls instvar)+ onls RIGHT_PAREN)+ instvar* |
                                  QUOTE? (LEFT_BRACKET onls instvar onls RIGHT_BRACKET)+ instvar* |
                                  (LEFT_PAREN onls instvar+ onls RIGHT_PAREN)+ instvar* |
                                  ((LEFT_PAREN onls instvar+ (onls RIGHT_ARROW onls instvar+)+ onls RIGHT_PAREN)+ instvar*)+

instvar                     ::= ttype | q_name | LEFT_BRACKET q_name+ RIGHT_BRACKET | LEFT_PAREN q_name+ RIGHT_PAREN | LEFT_PAREN RIGHT_PAREN

private fixity              ::= INFIXL | INFIXR | INFIX

exports                     ::= LEFT_PAREN onl export ((onl COMMA)? onl export)* (onl COMMA)? onl RIGHT_PAREN | LEFT_PAREN RIGHT_PAREN
export                      ::= export3 | export2 | export4
private export3             ::= (q_con | cname) onl LEFT_PAREN (onl cname_dot_dot (onl COMMA onl cname_dot_dot)*)? onl RIGHT_PAREN
private export2             ::= TYPE? onl cname+
private export4             ::= MODULE modid
cname_dot_dot               ::= cname | DOT_DOT

newconstr                   ::= newconstr_fielddecl | q_name atype
newconstr_fielddecl         ::= q_name onls LEFT_BRACE? onls type_signature onls RIGHT_BRACE?

cdecls                      ::= cdecl (nls cdecl)*
cidecls                     ::= cidecl (nls cidecl)*

inlinelike_pragma           ::= pragma
specialize_pragma           ::= pragma
minimal_pragma              ::= pragma

// copy of data_declaration but without all onls
cdecl_data_declaration      ::= DATA (onls ctype_pragma)? onls (LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* onls simpletype (onls LEFT_PAREN onls kind_signature onls RIGHT_PAREN)* (onls COLON_COLON ttype)? q_name*
private cdecl               ::= type_signature | cdecl_data_declaration | cidecl

private cidecl              ::= inlinelike_pragma | specialize_pragma | instance_declaration | default_declaration |
                                  newtype_declaration | data_declaration | minimal_pragma | type_declaration | type_family_declaration | cidecl_expression
cidecl_expression           ::= general_id+

expression                  ::= line_expression+ last_line_expression | last_line_expression
private line_expression     ::= general_id+ nls
private last_line_expression::= general_id+

scc_pragma                  ::= pragma
private general_id          ::= QUASIQUOTE | q_name | LEFT_PAREN | RIGHT_PAREN | FLOAT |
                                  SEMICOLON | LEFT_BRACKET | RIGHT_BRACKET | literal | LEFT_BRACE | RIGHT_BRACE |
                                  COMMA | symbol_reserved_op | QUOTE | BACKQUOTE | fixity | reserved_id |
                                  inlinelike_pragma | NEWLINE DIRECTIVE | scc_pragma

private symbol_reserved_op  ::= DOT_DOT | COLON_COLON | EQUAL | BACKSLASH | VERTICAL_BAR | LEFT_ARROW | RIGHT_ARROW | AT | TILDE | DOUBLE_RIGHT_ARROW

reserved_id                 ::= CASE | CLASS | DATA | DEFAULT | DERIVING | DO | ELSE | IF | IMPORT | IN | INFIX | INFIXL | INFIXR | INSTANCE | LET | MODULE | NEWTYPE | OF | THEN | TYPE | WHERE | UNDERSCORE
